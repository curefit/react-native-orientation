name: Dependabot Vulnerability to Jira

on:
  schedule:
    - cron: '0 12 * * *'  # Runs daily at 12:00 UTC (Adjust as needed)
  workflow_dispatch:      # Allows manual triggering

jobs:
  report_vulnerabilities:
    runs-on: ubuntu-latest
    steps:
      - name: Check out repository
        uses: actions/checkout@v2

      - name: Fetch Dependabot Alerts
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          curl -H "Authorization: token $GITHUB_TOKEN" \
               -H "Accept: application/vnd.github+json" \
               "https://api.github.com/repos/${{ github.repository }}/dependabot/alerts" \
               > alerts.json

      - name: Process Vulnerabilities and Create Jira Issues
        env:
          JIRA_TOKEN: ${{ secrets.JIRA_TOKEN }}
          JIRA_EMAIL: ${{ secrets.JIRA_EMAIL }}
          JIRA_URL: ${{ secrets.JIRA_URL }}
          PROJECT_KEY: SECBUGS-466  # Replace with your Jira project key
        run: |
          import json, requests

          # Load alerts from the JSON file
          with open('alerts.json') as f:
              alerts = json.load(f)

          # Filter for high and critical vulnerabilities
          high_critical_alerts = [
              alert for alert in alerts 
              if alert['security_vulnerability']['severity'] in ['high', 'critical']
          ]

          # For each high/critical vulnerability, create a Jira issue
          for alert in high_critical_alerts:
              title = f"Dependabot Alert: {alert['security_advisory']['summary']}"
              description = (
                  f"**Vulnerability:** {alert['security_advisory']['affected_package_name']}\n\n"
                  f"**Severity:** {alert['security_vulnerability']['severity']}\n"
                  f"**Description:** {alert['security_advisory']['description']}\n"
                  f"**More Info:** {alert['security_advisory']['url']}"
              )

              issue_data = {
                "fields": {
                  "project": { "key": "${{ env.PROJECT_KEY }}" },
                  "summary": title,
                  "description": description,
                  "issuetype": { "name": "Task" }
                }
              }

              # Make the request to Jira API to create an issue
              response = requests.post(
                  f"{env.JIRA_URL}/rest/api/2/issue",
                  headers={
                      "Content-Type": "application/json",
                      "Authorization": f"Basic {env.JIRA_EMAIL}:{env.JIRA_TOKEN}"
                  },
                  json=issue_data
              )

              if response.status_code == 201:
                  print(f"Created Jira issue for {title}")
              else:
                  print(f"Failed to create Jira issue for {title}, Status Code: {response.status_code}")
